import 'dart:async';

import 'package:dishcovery_app/core/models/comment_model.dart';
import 'package:dishcovery_app/core/services/comment_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

/// Provider for managing comment state and operations
class CommentProvider extends ChangeNotifier {
  CommentProvider({CommentService? commentService})
    : _commentService = commentService ?? CommentService();

  final CommentService _commentService;
  StreamSubscription<List<Comment>>? _commentSubscription;

  // State
  List<Comment> _comments = [];
  bool _isLoading = false;
  bool _isSubmitting = false;
  String? _error;
  String? _currentFeedId;
  int _commentCount = 0;

  // Getters
  List<Comment> get comments => _comments;
  bool get isLoading => _isLoading;
  bool get isSubmitting => _isSubmitting;
  String? get error => _error;
  int get commentCount => _commentCount;
  User? get currentUser => _commentService.currentUser;

  /// Load comments for a specific feed with real-time updates
  Future<void> loadComments(String feedId) async {
    if (_isLoading && _currentFeedId == feedId) return;

    debugPrint('üí¨ CommentProvider: Loading comments for feed: $feedId');

    // Cancel previous subscription if switching feeds
    if (_currentFeedId != feedId) {
      await _commentSubscription?.cancel();
      _comments = [];
    }

    _currentFeedId = feedId;
    _setLoading(true);
    _clearError();

    try {
      // Subscribe to real-time comment stream
      _commentSubscription = _commentService
          .getComments(feedId)
          .listen(
            (commentList) {
              debugPrint(
                'üí¨ CommentProvider: Received ${commentList.length} comments',
              );
              _comments = commentList;
              _commentCount = commentList.length;
              _setLoading(false);
              notifyListeners();
            },
            onError: (error) {
              debugPrint('‚ùå CommentProvider: Error loading comments: $error');
              _setError('Failed to load comments: ${error.toString()}');
              _setLoading(false);
            },
          );
    } catch (e) {
      debugPrint('‚ùå CommentProvider: Exception loading comments: $e');
      _setError('Failed to load comments: ${e.toString()}');
      _setLoading(false);
    }
  }

  /// Add a new comment to the current feed
  Future<bool> addComment(String feedId, String content) async {
    if (currentUser == null) {
      _setError('You must be logged in to comment');
      return false;
    }

    if (content.trim().isEmpty) {
      _setError('Comment cannot be empty');
      return false;
    }

    debugPrint('üí¨ CommentProvider: Adding comment to feed: $feedId');
    _setSubmitting(true);
    _clearError();

    try {
      // Create comment object
      final comment = Comment(
        id: '', // Will be auto-generated by CommentService
        feedId: feedId,
        userId: currentUser!.uid,
        userName: currentUser!.displayName ?? 'User',
        userPhotoUrl: currentUser!.photoURL,
        content: content.trim(),
        createdAt: DateTime.now(),
      );

      // Add comment via service
      final commentId = await _commentService.addComment(comment);

      if (commentId != null) {
        debugPrint(
          'üí¨ CommentProvider: Comment added successfully: $commentId',
        );
        _setSubmitting(false);
        return true;
      } else {
        throw Exception('Failed to add comment');
      }
    } catch (e) {
      debugPrint('‚ùå CommentProvider: Error adding comment: $e');
      _setError('Failed to add comment: ${e.toString()}');
      _setSubmitting(false);
      return false;
    }
  }

  /// Delete a comment
  Future<bool> deleteComment(String commentId, String feedId) async {
    if (currentUser == null) {
      _setError('You must be logged in to delete comments');
      return false;
    }

    debugPrint('üí¨ CommentProvider: Deleting comment: $commentId');
    _clearError();

    try {
      final success = await _commentService.deleteComment(commentId, feedId);

      if (success) {
        debugPrint('üí¨ CommentProvider: Comment deleted successfully');
        // The real-time stream will automatically update the list
        return true;
      } else {
        throw Exception('Failed to delete comment');
      }
    } catch (e) {
      debugPrint('‚ùå CommentProvider: Error deleting comment: $e');
      _setError('Failed to delete comment: ${e.toString()}');
      return false;
    }
  }

  /// Update an existing comment
  Future<bool> updateComment(Comment comment) async {
    if (currentUser == null) {
      _setError('You must be logged in to update comments');
      return false;
    }

    if (comment.userId != currentUser!.uid) {
      _setError('You can only update your own comments');
      return false;
    }

    if (comment.content.trim().isEmpty) {
      _setError('Comment cannot be empty');
      return false;
    }

    debugPrint('üí¨ CommentProvider: Updating comment: ${comment.id}');
    _clearError();

    try {
      final success = await _commentService.updateComment(comment);

      if (success) {
        debugPrint('üí¨ CommentProvider: Comment updated successfully');
        // The real-time stream will automatically update the list
        return true;
      } else {
        throw Exception('Failed to update comment');
      }
    } catch (e) {
      debugPrint('‚ùå CommentProvider: Error updating comment: $e');
      _setError('Failed to update comment: ${e.toString()}');
      return false;
    }
  }

  /// Clear all state (useful when navigating away)
  void clearState() {
    debugPrint('üí¨ CommentProvider: Clearing state');
    _commentSubscription?.cancel();
    _comments = [];
    _currentFeedId = null;
    _commentCount = 0;
    _isLoading = false;
    _isSubmitting = false;
    _clearError();
    notifyListeners();
  }

  /// Clear error message
  void clearError() {
    _clearError();
  }

  /// Set loading state
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  /// Set submitting state
  void _setSubmitting(bool submitting) {
    _isSubmitting = submitting;
    notifyListeners();
  }

  /// Set error message
  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  /// Clear error message
  void _clearError() {
    if (_error != null) {
      _error = null;
      notifyListeners();
    }
  }

  @override
  void dispose() {
    debugPrint('üí¨ CommentProvider: Disposing');
    _commentSubscription?.cancel();
    super.dispose();
  }
}
