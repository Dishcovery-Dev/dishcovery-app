// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/scan_result_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6794009314652665517),
    name: 'ScanResultEntity',
    lastPropertyId: const obx_int.IdUid(13, 2269532220407293858),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8659959268343620806),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8155718921391186491),
        name: 'isFood',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 964261166762712985),
        name: 'imagePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2588443584401535591),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4731864746355160028),
        name: 'origin',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 573618917759224921),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7027052122854645949),
        name: 'history',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8614214315038652433),
        name: 'recipeJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 523284944376794127),
        name: 'tagsString',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 638361500011429350),
        name: 'shared',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5728151631108112035),
        name: 'sharedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 7412549223063869281),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 2269532220407293858),
        name: 'tags',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 6794009314652665517),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [538005247682412464],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      4602000268188458531,
      4567248296391948129,
      5064094762055438430,
      4133298928439334605,
      1895205066393290535,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ScanResultEntity: obx_int.EntityDefinition<ScanResultEntity>(
      model: _entities[0],
      toOneRelations: (ScanResultEntity object) => [],
      toManyRelations: (ScanResultEntity object) => {},
      getId: (ScanResultEntity object) => object.id,
      setId: (ScanResultEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ScanResultEntity object, fb.Builder fbb) {
        final imagePathOffset = fbb.writeString(object.imagePath);
        final nameOffset = fbb.writeString(object.name);
        final originOffset = fbb.writeString(object.origin);
        final descriptionOffset = fbb.writeString(object.description);
        final historyOffset = fbb.writeString(object.history);
        final recipeJsonOffset = fbb.writeString(object.recipeJson);
        final tagsStringOffset = fbb.writeString(object.tagsString);
        final tagsOffset = fbb.writeList(
          object.tags.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(14);
        fbb.addInt64(0, object.id);
        fbb.addBool(1, object.isFood);
        fbb.addOffset(2, imagePathOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, originOffset);
        fbb.addOffset(5, descriptionOffset);
        fbb.addOffset(6, historyOffset);
        fbb.addOffset(7, recipeJsonOffset);
        fbb.addOffset(8, tagsStringOffset);
        fbb.addBool(9, object.shared);
        fbb.addInt64(10, object.sharedAt?.millisecondsSinceEpoch);
        fbb.addInt64(11, object.createdAt.millisecondsSinceEpoch);
        fbb.addOffset(12, tagsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final sharedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final isFoodParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final imagePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final originParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final historyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final recipeJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final tagsStringParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final sharedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          22,
          false,
        );
        final sharedAtParam = sharedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(sharedAtValue);
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
        );
        final object =
            ScanResultEntity(
                id: idParam,
                isFood: isFoodParam,
                imagePath: imagePathParam,
                name: nameParam,
                origin: originParam,
                description: descriptionParam,
                history: historyParam,
                recipeJson: recipeJsonParam,
                tagsString: tagsStringParam,
                shared: sharedParam,
                sharedAt: sharedAtParam,
                createdAt: createdAtParam,
              )
              ..tags = const fb.ListReader<String>(
                fb.StringReader(asciiOptimization: true),
                lazy: false,
              ).vTableGet(buffer, rootOffset, 28, []);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ScanResultEntity] entity fields to define ObjectBox queries.
class ScanResultEntity_ {
  /// See [ScanResultEntity.id].
  static final id = obx.QueryIntegerProperty<ScanResultEntity>(
    _entities[0].properties[0],
  );

  /// See [ScanResultEntity.isFood].
  static final isFood = obx.QueryBooleanProperty<ScanResultEntity>(
    _entities[0].properties[1],
  );

  /// See [ScanResultEntity.imagePath].
  static final imagePath = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[2],
  );

  /// See [ScanResultEntity.name].
  static final name = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[3],
  );

  /// See [ScanResultEntity.origin].
  static final origin = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[4],
  );

  /// See [ScanResultEntity.description].
  static final description = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[5],
  );

  /// See [ScanResultEntity.history].
  static final history = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[6],
  );

  /// See [ScanResultEntity.recipeJson].
  static final recipeJson = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[7],
  );

  /// See [ScanResultEntity.tagsString].
  static final tagsString = obx.QueryStringProperty<ScanResultEntity>(
    _entities[0].properties[8],
  );

  /// See [ScanResultEntity.shared].
  static final shared = obx.QueryBooleanProperty<ScanResultEntity>(
    _entities[0].properties[9],
  );

  /// See [ScanResultEntity.sharedAt].
  static final sharedAt = obx.QueryDateProperty<ScanResultEntity>(
    _entities[0].properties[10],
  );

  /// See [ScanResultEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<ScanResultEntity>(
    _entities[0].properties[11],
  );

  /// See [ScanResultEntity.tags].
  static final tags = obx.QueryStringVectorProperty<ScanResultEntity>(
    _entities[0].properties[12],
  );
}
